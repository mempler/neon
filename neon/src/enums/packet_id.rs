use neon_io::{
    reader::Reader,
    serializable::{Deserializable, Serializable},
    writer::Writer,
};

#[repr(u16)]
#[derive(Copy, Clone, Debug)]
pub enum PacketId {
    ClientSendUserStatus     = 0x00u16,
    ClientSendIrcMessage     = 0x01u16,
    ClientExit               = 0x02u16,
    ClientRequestStatusUpdate = 0x03u16,
    ClientPong               = 0x04u16,
    ServerLoginResponse      = 0x05u16,
    ServerSendMessage        = 0x07u16,
    ServerPing               = 0x08u16,
    ServerHandleIrcChangeUsername = 0x09u16,
    ServerHandleIrcQuit      = 0x0Au16,
    ServerHandleOsuUpdate    = 0x0Bu16,
    ServerHandleUserQuit     = 0x0Cu16,
    ServerSpectatorJoined    = 0x0Du16,
    ServerSpectatorLeft      = 0x0Eu16,
    ServerSpectateFrames     = 0x0Fu16,
    ClientStartSpectating    = 0x10u16,
    ClientStopSpectating     = 0x11u16,
    ClientSpectateFrames     = 0x12u16,
    ServerVersionUpdate      = 0x13u16,
    ClientErrorReport        = 0x14u16,
    ClientCantSpectate       = 0x15u16,
    ServerSpectatorCantSpectate = 0x16u16,
    ServerGetAttention       = 0x17u16,
    ServerAnnounce           = 0x18u16,
    ClientSendIrcMessagePrivate = 0x19u16,
    ServerMatchUpdate        = 0x1Au16,
    ServerMatchNew           = 0x1Bu16,
    ServerMatchDisband       = 0x1Cu16,
    ClientLobbyPart          = 0x1Du16,
    ClientLobbyJoin          = 0x1Eu16,
    ClientMatchCreate        = 0x1Fu16,
    ClientMatchJoin          = 0x20u16,
    ClientMatchPart          = 0x21u16,
    ServerMatchJoinSuccess   = 0x24u16,
    ServerMatchJoinFail      = 0x25u16,
    ClientMatchChangeSlot    = 0x26u16,
    ClientMatchReady         = 0x27u16,
    ClientMatchLock          = 0x28u16,
    ClientMatchChangeSettings = 0x29u16,
    ServerFellowSpectatorJoined = 0x2Au16,
    ServerFellowSpectatorLeft = 0x2Bu16,
    ClientMatchStart         = 0x2Cu16,
    ServerMatchStart         = 0x2Eu16,
    ClientMatchScoreUpdate   = 0x2Fu16,
    ServerMatchScoreUpdate   = 0x30u16,
    ClientMatchComplete      = 0x31u16,
    ServerMatchTransferHost  = 0x32u16,
    ClientMatchChangeMods    = 0x33u16,
    ClientMatchLoadComplete  = 0x34u16,
    ServerMatchAllPlayersLoaded = 0x35u16,
    ClientMatchNoBeatmap     = 0x36u16,
    ClientMatchNotReady      = 0x37u16,
    ClientMatchFailed        = 0x38u16,
    ServerMatchPlayerFailed  = 0x39u16,
    ServerMatchComplete      = 0x3Au16,
    ClientMatchHasBeatmap    = 0x3Bu16,
    ClientMatchSkipRequest   = 0x3Cu16,
    ServerMatchSkip          = 0x3Du16,
    ServerUnauthorised       = 0x3Eu16,
    ClientChannelJoin        = 0x3Fu16,
    ServerChannelJoinSuccess = 0x40u16,
    ServerChannelAvailable   = 0x41u16,
    ServerChannelRevoked     = 0x42u16,
    ServerChannelAvailableAutojoin = 0x43u16,
    ClientBeatmapInfoRequest = 0x44u16,
    ServerBeatmapInfoReply   = 0x45u16,
    ClientMatchTransferHost  = 0x46u16,
    ServerLoginPermissions   = 0x47u16,
    ServerFriendsList        = 0x48u16,
    ClientFriendAdd          = 0x49u16,
    ClientFriendRemove       = 0x4Au16,
    ServerProtocolNegotiation = 0x4Bu16,
    ServerTitleUpdate        = 0x4Cu16,
    ClientMatchChangeTeam    = 0x4Du16,
    ClientChannelLeave       = 0x4Eu16,
    ClientReceiveUpdates     = 0x4Fu16,
    ServerMonitor            = 0x50u16,
    ServerMatchPlayerSkipped = 0x51u16,
    ClientSetIrcAwayMessage  = 0x52u16,
    ServerUserPresence       = 0x53u16,
    ClientUserStatsRequest   = 0x55u16,
    ServerRestart            = 0x56u16,
    ClientInvite             = 0x57u16,
    ServerInvite             = 0x58u16,
    ServerChannelListingComplete = 0x59u16,
    ClientMatchChangePassword = 0x5Au16,
    ServerMatchChangePassword = 0x5Bu16,
    ServerBanInfo            = 0x5Cu16,
    ClientSpecialMatchInfoRequest = 0x5Du16,
    ServerUserSilenced       = 0x5Eu16,
    ServerUserPresenceSingle = 0x5Fu16,
    ServerUserPresenceBundle = 0x60u16,
    ClientUserPresenceRequest = 0x61u16,
    ClientUserPresenceRequestAll = 0x62u16,
    ClientUserToggleBlockNonFriendPm = 0x63u16,
    ServerUserPmBlocked      = 0x64u16,
    ServerTargetIsSilenced   = 0x65u16,
    ServerVersionUpdateForced = 0x66u16,
    ServerSwitchServer       = 0x67u16,
    ServerAccountRestricted  = 0x68u16,
    ServerRtx                = 0x69u16,
    ClientMatchAbort         = 0x6Au16,
    ServerSwitchTourneyServer = 0x6Bu16,
    ClientSpecialJoinMatchChannel = 0x6Cu16,
    ClientSpecialLeaveMatchChannel = 0x6Du16,
}

impl Deserializable for PacketId {
    type Output<'a> = PacketId;

    fn deserialize<'a>(reader: &mut Reader<'a>) -> Option<Self::Output<'a>> {
        match reader.read_u16()? {
            0x00u16 => Some(PacketId::ClientSendUserStatus),
            0x01u16 => Some(PacketId::ClientSendIrcMessage),
            0x02u16 => Some(PacketId::ClientExit),
            0x03u16 => Some(PacketId::ClientRequestStatusUpdate),
            0x04u16 => Some(PacketId::ClientPong),
            0x05u16 => Some(PacketId::ServerLoginResponse),
            0x07u16 => Some(PacketId::ServerSendMessage),
            0x08u16 => Some(PacketId::ServerPing),
            0x09u16 => Some(PacketId::ServerHandleIrcChangeUsername),
            0x0Au16 => Some(PacketId::ServerHandleIrcQuit),
            0x0Bu16 => Some(PacketId::ServerHandleOsuUpdate),
            0x0Cu16 => Some(PacketId::ServerHandleUserQuit),
            0x0Du16 => Some(PacketId::ServerSpectatorJoined),
            0x0Eu16 => Some(PacketId::ServerSpectatorLeft),
            0x0Fu16 => Some(PacketId::ServerSpectateFrames),
            0x10u16 => Some(PacketId::ClientStartSpectating),
            0x11u16 => Some(PacketId::ClientStopSpectating),
            0x12u16 => Some(PacketId::ClientSpectateFrames),
            0x13u16 => Some(PacketId::ServerVersionUpdate),
            0x14u16 => Some(PacketId::ClientErrorReport),
            0x15u16 => Some(PacketId::ClientCantSpectate),
            0x16u16 => Some(PacketId::ServerSpectatorCantSpectate),
            0x17u16 => Some(PacketId::ServerGetAttention),
            0x18u16 => Some(PacketId::ServerAnnounce),
            0x19u16 => Some(PacketId::ClientSendIrcMessagePrivate),
            0x1Au16 => Some(PacketId::ServerMatchUpdate),
            0x1Bu16 => Some(PacketId::ServerMatchNew),
            0x1Cu16 => Some(PacketId::ServerMatchDisband),
            0x1Du16 => Some(PacketId::ClientLobbyPart),
            0x1Eu16 => Some(PacketId::ClientLobbyJoin),
            0x1Fu16 => Some(PacketId::ClientMatchCreate),
            0x20u16 => Some(PacketId::ClientMatchJoin),
            0x21u16 => Some(PacketId::ClientMatchPart),
            0x24u16 => Some(PacketId::ServerMatchJoinSuccess),
            0x25u16 => Some(PacketId::ServerMatchJoinFail),
            0x26u16 => Some(PacketId::ClientMatchChangeSlot),
            0x27u16 => Some(PacketId::ClientMatchReady),
            0x28u16 => Some(PacketId::ClientMatchLock),
            0x29u16 => Some(PacketId::ClientMatchChangeSettings),
            0x2Au16 => Some(PacketId::ServerFellowSpectatorJoined),
            0x2Bu16 => Some(PacketId::ServerFellowSpectatorLeft),
            0x2Cu16 => Some(PacketId::ClientMatchStart),
            0x2Eu16 => Some(PacketId::ServerMatchStart),
            0x2Fu16 => Some(PacketId::ClientMatchScoreUpdate),
            0x30u16 => Some(PacketId::ServerMatchScoreUpdate),
            0x31u16 => Some(PacketId::ClientMatchComplete),
            0x32u16 => Some(PacketId::ServerMatchTransferHost),
            0x33u16 => Some(PacketId::ClientMatchChangeMods),
            0x34u16 => Some(PacketId::ClientMatchLoadComplete),
            0x35u16 => Some(PacketId::ServerMatchAllPlayersLoaded),
            0x36u16 => Some(PacketId::ClientMatchNoBeatmap),
            0x37u16 => Some(PacketId::ClientMatchNotReady),
            0x38u16 => Some(PacketId::ClientMatchFailed),
            0x39u16 => Some(PacketId::ServerMatchPlayerFailed),
            0x3Au16 => Some(PacketId::ServerMatchComplete),
            0x3Bu16 => Some(PacketId::ClientMatchHasBeatmap),
            0x3Cu16 => Some(PacketId::ClientMatchSkipRequest),
            0x3Du16 => Some(PacketId::ServerMatchSkip),
            0x3Eu16 => Some(PacketId::ServerUnauthorised),
            0x3Fu16 => Some(PacketId::ClientChannelJoin),
            0x40u16 => Some(PacketId::ServerChannelJoinSuccess),
            0x41u16 => Some(PacketId::ServerChannelAvailable),
            0x42u16 => Some(PacketId::ServerChannelRevoked),
            0x43u16 => Some(PacketId::ServerChannelAvailableAutojoin),
            0x44u16 => Some(PacketId::ClientBeatmapInfoRequest),
            0x45u16 => Some(PacketId::ServerBeatmapInfoReply),
            0x46u16 => Some(PacketId::ClientMatchTransferHost),
            0x47u16 => Some(PacketId::ServerLoginPermissions),
            0x48u16 => Some(PacketId::ServerFriendsList),
            0x49u16 => Some(PacketId::ClientFriendAdd),
            0x4Au16 => Some(PacketId::ClientFriendRemove),
            0x4Bu16 => Some(PacketId::ServerProtocolNegotiation),
            0x4Cu16 => Some(PacketId::ServerTitleUpdate),
            0x4Du16 => Some(PacketId::ClientMatchChangeTeam),
            0x4Eu16 => Some(PacketId::ClientChannelLeave),
            0x4Fu16 => Some(PacketId::ClientReceiveUpdates),
            0x50u16 => Some(PacketId::ServerMonitor),
            0x51u16 => Some(PacketId::ServerMatchPlayerSkipped),
            0x52u16 => Some(PacketId::ClientSetIrcAwayMessage),
            0x53u16 => Some(PacketId::ServerUserPresence),
            0x55u16 => Some(PacketId::ClientUserStatsRequest),
            0x56u16 => Some(PacketId::ServerRestart),
            0x57u16 => Some(PacketId::ClientInvite),
            0x58u16 => Some(PacketId::ServerInvite),
            0x59u16 => Some(PacketId::ServerChannelListingComplete),
            0x5Au16 => Some(PacketId::ClientMatchChangePassword),
            0x5Bu16 => Some(PacketId::ServerMatchChangePassword),
            0x5Cu16 => Some(PacketId::ServerBanInfo),
            0x5Du16 => Some(PacketId::ClientSpecialMatchInfoRequest),
            0x5Eu16 => Some(PacketId::ServerUserSilenced),
            0x5Fu16 => Some(PacketId::ServerUserPresenceSingle),
            0x60u16 => Some(PacketId::ServerUserPresenceBundle),
            0x61u16 => Some(PacketId::ClientUserPresenceRequest),
            0x62u16 => Some(PacketId::ClientUserPresenceRequestAll),
            0x63u16 => Some(PacketId::ClientUserToggleBlockNonFriendPm),
            0x64u16 => Some(PacketId::ServerUserPmBlocked),
            0x65u16 => Some(PacketId::ServerTargetIsSilenced),
            0x66u16 => Some(PacketId::ServerVersionUpdateForced),
            0x67u16 => Some(PacketId::ServerSwitchServer),
            0x68u16 => Some(PacketId::ServerAccountRestricted),
            0x69u16 => Some(PacketId::ServerRtx),
            0x6Au16 => Some(PacketId::ClientMatchAbort),
            0x6Bu16 => Some(PacketId::ServerSwitchTourneyServer),
            0x6Cu16 => Some(PacketId::ClientSpecialJoinMatchChannel),
            0x6Du16 => Some(PacketId::ClientSpecialLeaveMatchChannel),

            _ => None,
        }
    }
}

impl Serializable for PacketId {
    fn serialize(&self, writer: &mut Writer) {
        writer.write_u16(*self as _)
    }
}
