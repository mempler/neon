use neon_io::{
    reader::Reader,
    serializable::{Deserializable, Serializable},
    writer::Writer,
};

#[repr(u16)]
#[derive(Copy, Clone, Debug)]
pub enum PacketId {
    ClientSendUserStatus             = 0x00,
    ClientSendIrcMessage             = 0x01,
    ClientExit                       = 0x02,
    ClientRequestStatusUpdate        = 0x03,
    ClientPong                       = 0x04,
    ServerLoginResponse              = 0x05,
    ServerSendMessage                = 0x07,
    ServerPing                       = 0x08,
    ServerHandleIrcChangeUsername    = 0x09,
    ServerHandleIrcQuit              = 0x0A,
    ServerHandleOsuUpdate            = 0x0B,
    ServerHandleUserQuit             = 0x0C,
    ServerSpectatorJoined            = 0x0D,
    ServerSpectatorLeft              = 0x0E,
    ServerSpectateFrames             = 0x0F,
    ClientStartSpectating            = 0x10,
    ClientStopSpectating             = 0x11,
    ClientSpectateFrames             = 0x12,
    ServerVersionUpdate              = 0x13,
    ClientErrorReport                = 0x14,
    ClientCantSpectate               = 0x15,
    ServerSpectatorCantSpectate      = 0x16,
    ServerGetAttention               = 0x17,
    ServerAnnounce                   = 0x18,
    ClientSendIrcMessagePrivate      = 0x19,
    ServerMatchUpdate                = 0x1A,
    ServerMatchNew                   = 0x1B,
    ServerMatchDisband               = 0x1C,
    ClientLobbyPart                  = 0x1D,
    ClientLobbyJoin                  = 0x1E,
    ClientMatchCreate                = 0x1F,
    ClientMatchJoin                  = 0x20,
    ClientMatchPart                  = 0x21,
    ServerMatchJoinSuccess           = 0x24,
    ServerMatchJoinFail              = 0x25,
    ClientMatchChangeSlot            = 0x26,
    ClientMatchReady                 = 0x27,
    ClientMatchLock                  = 0x28,
    ClientMatchChangeSettings        = 0x29,
    ServerFellowSpectatorJoined      = 0x2A,
    ServerFellowSpectatorLeft        = 0x2B,
    ClientMatchStart                 = 0x2C,
    ServerMatchStart                 = 0x2E,
    ClientMatchScoreUpdate           = 0x2F,
    ServerMatchScoreUpdate           = 0x30,
    ClientMatchComplete              = 0x31,
    ServerMatchTransferHost          = 0x32,
    ClientMatchChangeMods            = 0x33,
    ClientMatchLoadComplete          = 0x34,
    ServerMatchAllPlayersLoaded      = 0x35,
    ClientMatchNoBeatmap             = 0x36,
    ClientMatchNotReady              = 0x37,
    ClientMatchFailed                = 0x38,
    ServerMatchPlayerFailed          = 0x39,
    ServerMatchComplete              = 0x3A,
    ClientMatchHasBeatmap            = 0x3B,
    ClientMatchSkipRequest           = 0x3C,
    ServerMatchSkip                  = 0x3D,
    ServerUnauthorised               = 0x3E,
    ClientChannelJoin                = 0x3F,
    ServerChannelJoinSuccess         = 0x40,
    ServerChannelAvailable           = 0x41,
    ServerChannelRevoked             = 0x42,
    ServerChannelAvailableAutojoin   = 0x43,
    ClientBeatmapInfoRequest         = 0x44,
    ServerBeatmapInfoReply           = 0x45,
    ClientMatchTransferHost          = 0x46,
    ServerLoginPermissions           = 0x47,
    ServerFriendsList                = 0x48,
    ClientFriendAdd                  = 0x49,
    ClientFriendRemove               = 0x4A,
    ServerProtocolNegotiation        = 0x4B,
    ServerTitleUpdate                = 0x4C,
    ClientMatchChangeTeam            = 0x4D,
    ClientChannelLeave               = 0x4E,
    ClientReceiveUpdates             = 0x4F,
    ServerMonitor                    = 0x50,
    ServerMatchPlayerSkipped         = 0x51,
    ClientSetIrcAwayMessage          = 0x52,
    ServerUserPresence               = 0x53,
    ClientUserStatsRequest           = 0x55,
    ServerRestart                    = 0x56,
    ClientInvite                     = 0x57,
    ServerInvite                     = 0x58,
    ServerChannelListingComplete     = 0x59,
    ClientMatchChangePassword        = 0x5A,
    ServerMatchChangePassword        = 0x5B,
    ServerBanInfo                    = 0x5C,
    ClientSpecialMatchInfoRequest    = 0x5D,
    ServerUserSilenced               = 0x5E,
    ServerUserPresenceSingle         = 0x5F,
    ServerUserPresenceBundle         = 0x60,
    ClientUserPresenceRequest        = 0x61,
    ClientUserPresenceRequestAll     = 0x62,
    ClientUserToggleBlockNonFriendPm = 0x63,
    ServerUserPmBlocked              = 0x64,
    ServerTargetIsSilenced           = 0x65,
    ServerVersionUpdateForced        = 0x66,
    ServerSwitchServer               = 0x67,
    ServerAccountRestricted          = 0x68,
    ServerRtx                        = 0x69,
    ClientMatchAbort                 = 0x6A,
    ServerSwitchTourneyServer        = 0x6B,
    ClientSpecialJoinMatchChannel    = 0x6C,
    ClientSpecialLeaveMatchChannel   = 0x6D,
}

impl Deserializable for PacketId {
    type Output<'a> = PacketId;

    fn deserialize<'a>(reader: &mut Reader<'a>) -> Option<Self::Output<'a>> {
        match reader.read_u16()? {
            0x00 => Some(PacketId::ClientSendUserStatus),
            0x01 => Some(PacketId::ClientSendIrcMessage),
            0x02 => Some(PacketId::ClientExit),
            0x03 => Some(PacketId::ClientRequestStatusUpdate),
            0x04 => Some(PacketId::ClientPong),
            0x05 => Some(PacketId::ServerLoginResponse),
            0x07 => Some(PacketId::ServerSendMessage),
            0x08 => Some(PacketId::ServerPing),
            0x09 => Some(PacketId::ServerHandleIrcChangeUsername),
            0x0A => Some(PacketId::ServerHandleIrcQuit),
            0x0B => Some(PacketId::ServerHandleOsuUpdate),
            0x0C => Some(PacketId::ServerHandleUserQuit),
            0x0D => Some(PacketId::ServerSpectatorJoined),
            0x0E => Some(PacketId::ServerSpectatorLeft),
            0x0F => Some(PacketId::ServerSpectateFrames),
            0x10 => Some(PacketId::ClientStartSpectating),
            0x11 => Some(PacketId::ClientStopSpectating),
            0x12 => Some(PacketId::ClientSpectateFrames),
            0x13 => Some(PacketId::ServerVersionUpdate),
            0x14 => Some(PacketId::ClientErrorReport),
            0x15 => Some(PacketId::ClientCantSpectate),
            0x16 => Some(PacketId::ServerSpectatorCantSpectate),
            0x17 => Some(PacketId::ServerGetAttention),
            0x18 => Some(PacketId::ServerAnnounce),
            0x19 => Some(PacketId::ClientSendIrcMessagePrivate),
            0x1A => Some(PacketId::ServerMatchUpdate),
            0x1B => Some(PacketId::ServerMatchNew),
            0x1C => Some(PacketId::ServerMatchDisband),
            0x1D => Some(PacketId::ClientLobbyPart),
            0x1E => Some(PacketId::ClientLobbyJoin),
            0x1F => Some(PacketId::ClientMatchCreate),
            0x20 => Some(PacketId::ClientMatchJoin),
            0x21 => Some(PacketId::ClientMatchPart),
            0x24 => Some(PacketId::ServerMatchJoinSuccess),
            0x25 => Some(PacketId::ServerMatchJoinFail),
            0x26 => Some(PacketId::ClientMatchChangeSlot),
            0x27 => Some(PacketId::ClientMatchReady),
            0x28 => Some(PacketId::ClientMatchLock),
            0x29 => Some(PacketId::ClientMatchChangeSettings),
            0x2A => Some(PacketId::ServerFellowSpectatorJoined),
            0x2B => Some(PacketId::ServerFellowSpectatorLeft),
            0x2C => Some(PacketId::ClientMatchStart),
            0x2E => Some(PacketId::ServerMatchStart),
            0x2F => Some(PacketId::ClientMatchScoreUpdate),
            0x30 => Some(PacketId::ServerMatchScoreUpdate),
            0x31 => Some(PacketId::ClientMatchComplete),
            0x32 => Some(PacketId::ServerMatchTransferHost),
            0x33 => Some(PacketId::ClientMatchChangeMods),
            0x34 => Some(PacketId::ClientMatchLoadComplete),
            0x35 => Some(PacketId::ServerMatchAllPlayersLoaded),
            0x36 => Some(PacketId::ClientMatchNoBeatmap),
            0x37 => Some(PacketId::ClientMatchNotReady),
            0x38 => Some(PacketId::ClientMatchFailed),
            0x39 => Some(PacketId::ServerMatchPlayerFailed),
            0x3A => Some(PacketId::ServerMatchComplete),
            0x3B => Some(PacketId::ClientMatchHasBeatmap),
            0x3C => Some(PacketId::ClientMatchSkipRequest),
            0x3D => Some(PacketId::ServerMatchSkip),
            0x3E => Some(PacketId::ServerUnauthorised),
            0x3F => Some(PacketId::ClientChannelJoin),
            0x40 => Some(PacketId::ServerChannelJoinSuccess),
            0x41 => Some(PacketId::ServerChannelAvailable),
            0x42 => Some(PacketId::ServerChannelRevoked),
            0x43 => Some(PacketId::ServerChannelAvailableAutojoin),
            0x44 => Some(PacketId::ClientBeatmapInfoRequest),
            0x45 => Some(PacketId::ServerBeatmapInfoReply),
            0x46 => Some(PacketId::ClientMatchTransferHost),
            0x47 => Some(PacketId::ServerLoginPermissions),
            0x48 => Some(PacketId::ServerFriendsList),
            0x49 => Some(PacketId::ClientFriendAdd),
            0x4A => Some(PacketId::ClientFriendRemove),
            0x4B => Some(PacketId::ServerProtocolNegotiation),
            0x4C => Some(PacketId::ServerTitleUpdate),
            0x4D => Some(PacketId::ClientMatchChangeTeam),
            0x4E => Some(PacketId::ClientChannelLeave),
            0x4F => Some(PacketId::ClientReceiveUpdates),
            0x50 => Some(PacketId::ServerMonitor),
            0x51 => Some(PacketId::ServerMatchPlayerSkipped),
            0x52 => Some(PacketId::ClientSetIrcAwayMessage),
            0x53 => Some(PacketId::ServerUserPresence),
            0x55 => Some(PacketId::ClientUserStatsRequest),
            0x56 => Some(PacketId::ServerRestart),
            0x57 => Some(PacketId::ClientInvite),
            0x58 => Some(PacketId::ServerInvite),
            0x59 => Some(PacketId::ServerChannelListingComplete),
            0x5A => Some(PacketId::ClientMatchChangePassword),
            0x5B => Some(PacketId::ServerMatchChangePassword),
            0x5C => Some(PacketId::ServerBanInfo),
            0x5D => Some(PacketId::ClientSpecialMatchInfoRequest),
            0x5E => Some(PacketId::ServerUserSilenced),
            0x5F => Some(PacketId::ServerUserPresenceSingle),
            0x60 => Some(PacketId::ServerUserPresenceBundle),
            0x61 => Some(PacketId::ClientUserPresenceRequest),
            0x62 => Some(PacketId::ClientUserPresenceRequestAll),
            0x63 => Some(PacketId::ClientUserToggleBlockNonFriendPm),
            0x64 => Some(PacketId::ServerUserPmBlocked),
            0x65 => Some(PacketId::ServerTargetIsSilenced),
            0x66 => Some(PacketId::ServerVersionUpdateForced),
            0x67 => Some(PacketId::ServerSwitchServer),
            0x68 => Some(PacketId::ServerAccountRestricted),
            0x69 => Some(PacketId::ServerRtx),
            0x6A => Some(PacketId::ClientMatchAbort),
            0x6B => Some(PacketId::ServerSwitchTourneyServer),
            0x6C => Some(PacketId::ClientSpecialJoinMatchChannel),
            0x6D => Some(PacketId::ClientSpecialLeaveMatchChannel),

            _ => None,
        }
    }
}

impl Serializable for PacketId {
    fn serialize(&self, writer: &mut Writer) {
        writer.write_u16(*self as _)
    }
}
